🚀 Build a fully responsive, multi-theme, AI-powered “**PHP to Python Converter Tool**” web application . Include all required files, code, and integrations in one build. 

🎯 App Purpose:
Convert uploaded or pasted PHP code into secure, tested Python code using an OpenAI-compatible API (GPT-4, Groq, etc.). The app will:
- Allow OpenAI API connection via user-entered Base URL & Key
- Let user select models after connection
- Convert PHP ➡️ Python using selected model
- Apply security best practices in output
- Offer detailed documentation & developer hints
- Allow AI auto-testing of generated Python code
- Display test inputs, outputs, results
- Allow downloading of secure, converted code & docs
- Support Dark/Light theme toggle (multi-theme UI)

---

🎨 Frontend (html + TailwindCSS)
Build a beautiful, mobile-responsive interface

✅ UI Sections:
- **Header**: “PHP ➡️ Python Secure AI Converter” with theme toggle switch (dark/light)
- **Left Pane**: Monaco Editor for PHP (editable)
- **Right Pane**: Monaco Editor for Python (readonly)
- **Bottom Tabs**: 
  - `Security Report`
  - `Documentation`
  - `Download Output`

✅ Controls:
- `API Settings`:
  - Input for **Base URL**
  - Input for **API Key**
  - Button: “Connect to AI”
  - Dropdown: “Choose AI Model” (dynamically fetched)
- File Upload Button (PHP)
- Convert Button
- Toggle: “Apply Security Fixes”
- Tooltip/Hint Button: “Explain This Code”
- Download `.py` & `.md` buttons

✅ Multi-Theme Design:
- Dark and Light mode using Tailwind + Theme Context
- Persistent user theme selection (optional: localStorage)

---

🧠 Backend (Flask)

✅ Core Features:
1. **OpenAI-Compatible Connector**
   - Accept Base URL & API Key
   - GET `/v1/models` to fetch list of available models

2. **AI Code Conversion (PHP ➡️ Python)**
   - Send prompt with PHP code to selected model:
     ```
     Convert this PHP code to secure, PEP-8-compliant Python using Flask. Avoid `eval`, `exec`, and unsafe functions. Add inline comments. Replace $_POST/$_GET with request.form.get().
     ```

3. **Developer Hint Generator**
   - Generate a code explanation:
     ```
     Explain this code line-by-line. Include logic, purpose, and how it should be used securely.
     ```

4. **Security Fix Checker**
   - Analyze Python code for:
     - Insecure functions (eval, exec, os.system)
     - Missing input validation
     - Hardcoded credentials
   - Suggest improvements and apply inline annotations

5. **Documentation Generator**
   - Explain:
     - What the code does
     - Security enhancements made
     - Test cases generated
     - Output examples

6. **Download Routes**
   - Allow user to download:
     - Converted Python code
     - Markdown documentation

---

📄 Sample PHP Input:
```php
<?php
$user = $_POST['username'];
if ($user === 'admin') {
  echo "Welcome Admin!";
} else {
  echo "Access Denied.";
}
?>
